//定义插件
plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
}

//应用于所有模块
allprojects {

    //设置一些自定义的值
    ext {
        set('JuejinVersion', '1.0.0')
    }

    //应用插件
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    version "${JuejinVersion}"
    group = 'com.bytedance.juejin'
    //编译版本jdk8
    sourceCompatibility = '1.8'

    //仓库地址
    repositories {
        mavenCentral()
    }

    var excludeBasic = ['juejin-basic', 'juejin-gateway']
    var excludeWeb = ['juejin-gateway']

    //依赖
    dependencies {
        if (!excludeBasic.contains(project.name)) {
            implementation project(':juejin-basic')
        }
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
        implementation 'org.springframework.cloud:spring-cloud-loadbalancer'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
        if (!excludeWeb.contains(project.name)) {
            implementation 'org.springframework.boot:spring-boot-starter-web'
        }
        //implementation 'io.springfox:springfox-boot-starter:3.0.0'
        //implementation 'com.github.shijingsh:knife4j-spring-boot-starter:3.0.5'
        implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'
        //implementation 'com.github.shijingsh:knife4j-springdoc-ui:3.0.5'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    //依赖管理
    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.4'
            mavenBom 'com.alibaba.cloud:spring-cloud-alibaba-dependencies:2021.1'
        }
    }

    //测试
    test {
        useJUnitPlatform()
    }

    //编译编码
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    processResources {
        //资源文件处理之前
        doFirst {
            Set<String> mSet = new HashSet<>()
            //遍历所有的依赖
            project.configurations.forEach(configuration -> {
                configuration.allDependencies.forEach(dependency -> {
                    //如果是我们项目中的业务模块则添加该模块名称
                    if (dependency.group == 'com.bytedance.juejin') {
                        mSet.add(dependency.name)
                    }
                })
            })
            //移除，基础模块不需要路由
            mSet.remove('juejin-basic')
            //如果包含了业务模块
            if (!mSet.isEmpty()) {
                //获得资源目录
                File resourcesDir = new File(project.projectDir, '/src/main/resources')
                //创建路由文件
                File file = new File(resourcesDir, 'router.properties')
                if (!file.exists()) {
                    file.createNewFile()
                }
                //将模块信息写入文件
                Properties properties = new Properties()
                properties.setProperty("routers", String.join(',', mSet))
                OutputStream os = new FileOutputStream(file)
                properties.store(os, "Routers generated file")
                os.close()
            }
        }
    }

    clean {
        doLast {
            File resourcesDir = new File(project.projectDir, '/src/main/resources')
            File file = new File(resourcesDir, 'router.properties')
            if (file.exists()) {
                file.delete()
            }
        }
    }
}