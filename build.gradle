//定义插件
plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
}

//应用于所有模块
allprojects {

    //设置一些自定义的值
    ext {
        set('JuejinVersion', '1.0.0')
    }

    //应用插件
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    version "${JuejinVersion}"
    group = 'com.bytedance'

    //仓库地址
    repositories {
        mavenCentral()
    }

    //依赖
    dependencies {

        implementation 'org.springframework.cloud:spring-cloud-loadbalancer'
        implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
        implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'

        implementation 'com.github.linyuzai:concept-domain-spring-boot-starter:1.6.1'

        implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        if (project.name == 'application-gateway' || project.name.startsWith('domain-')) {
            return
        }

        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation 'org.hibernate.validator:hibernate-validator'

        implementation 'org.springframework.boot:spring-boot-starter-web'

        implementation 'com.github.linyuzai:concept-cloud-web:1.3.0'
        implementation 'com.github.linyuzai:concept-domain-mbp:1.6.1.1'

        implementation 'mysql:mysql-connector-java'
        implementation 'com.baomidou:mybatis-plus-boot-starter:3.5.2'

        if (project.name == 'juejin-basic') {
            return
        }

        implementation project(':juejin-basic')
    }

    //依赖管理
    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.4'
            mavenBom 'com.alibaba.cloud:spring-cloud-alibaba-dependencies:2021.1'
        }
    }

    //测试
    test {
        useJUnitPlatform()
    }

    //编译编码
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    //application 启动模块 用 bootJar 打包，其他模块用 jar 打包
    if (project.name.contains("application-")) {
        bootJar.enabled = true
        jar.enabled = false
    } else {
        bootJar.enabled = false
        jar.enabled = true
    }

    processResources {
        //资源文件处理之前生成路由文件
        doFirst {
            Set<String> mSet = new HashSet<>()
            //遍历所有的依赖
            project.configurations.forEach(configuration -> {
                configuration.allDependencies.forEach(dependency -> {
                    //如果是我们项目中的业务模块则添加该模块名称
                    if (dependency.group == 'com.bytedance.juejin') {
                        mSet.add(dependency.name.replace('module-', ''))
                    }
                })
            })
            //移除，基础模块不需要路由
            mSet.remove('juejin-basic')
            //如果包含了业务模块
            if (!mSet.isEmpty()) {
                //获得资源目录
                File resourcesDir = new File(project.projectDir, '/src/main/resources')
                //创建路由文件
                File file = new File(resourcesDir, 'router.properties')
                if (!file.exists()) {
                    file.createNewFile()
                }
                //将模块信息写入文件
                Properties properties = new Properties()
                properties.setProperty("routers", String.join(',', mSet))
                OutputStream os = new FileOutputStream(file)
                properties.store(os, "Routers generated file")
                os.close()
            }
        }
    }

    clean {
        doLast {
            //删除路由文件
            File resourcesDir = new File(project.projectDir, '/src/main/resources')
            File file = new File(resourcesDir, 'router.properties')
            if (file.exists()) {
                file.delete()
            }
        }
    }
}